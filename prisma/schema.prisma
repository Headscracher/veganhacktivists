// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  playgroudRequests      PlaygroundRequest[]
  playgroundApplications PlaygroundApplication[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Priority {
  Low
  Medium
  High
  Urgent
}

model PlaygroundApplication {
  id                  String            @id @default(cuid())
  providedEmail       String
  applicant           User              @relation(fields: [applicantId], references: [id])
  applicantId         String
  name                String
  portfolioLink       String?
  twitterUrl          String?
  instagramUrl        String?
  linkedinUrl         String?
  hasAppliedInThePast Boolean
  isVegan             Boolean
  calendlyUrl         String?
  moreInfo            String?
  Request             PlaygroundRequest @relation(fields: [requestId], references: [id])
  requestId           String

  @@unique([requestId, applicantId])
}

enum PlaygroundRequestCategory {
  Design
  Website
  Marketing
  VideoProduction
  SocialMedia
}

model PlaygroundRequest {
  id                String                    @id @default(cuid())
  applications      PlaygroundApplication[]
  phone             String?
  organization      String?
  website           String
  calendlyUrl       String?
  title             String
  category          PlaygroundRequestCategory
  priority          Priority
  roleTitle         String
  requiredSkills    String[]                  @default([])
  isFree            Boolean
  budget            Decimal                   @db.Money
  description       String                    @db.Text
  dueDate           DateTime                  @db.Date
  estimatedTimeDays Int
  requester         User                      @relation(fields: [requesterId], references: [id])
  requesterId       String
  isApproved        Boolean                   @default(false)
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
}
