// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  User
  Admin
}

model User {
  id            String    @id @default(cuid())
  role          UserRole  @default(User)
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  playgroudRequests      PlaygroundRequest[]
  playgroundApplications PlaygroundApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Status {
  Pending
  Accepted
  Rejected
}

enum TimePerWeek {
  OneToThree
  ThreeToFive
  FiveToEight
  TenPlus
}

model PlaygroundApplication {
  id                   String      @id @default(cuid())
  providedEmail        String
  applicantId          String
  name                 String
  availableTimePerWeek TimePerWeek
  portfolioLink        String
  twitterUrl           String?
  instagramUrl         String?
  linkedinUrl          String?
  hasAppliedInThePast  Boolean
  isVegan              Boolean
  calendlyUrl          String?
  moreInfo             String
  requestId            String
  status               Status      @default(Pending)

  applicant User              @relation(fields: [applicantId], references: [id])
  request   PlaygroundRequest @relation(fields: [requestId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([requestId, applicantId])
}

enum PlaygroundRequestCategory {
  Developer
  Designer
  Writer
  Editor
  Researcher
  Translator
  Marketer
  Social
  DataScientist
  Security
  Other
}

model DiscordMessage {
  messageId           String @db.Char(19)
  channelId           String @db.Char(19)
  playgroundRequestId String

  request PlaygroundRequest? @relation(fields: [playgroundRequestId], references: [id])

  @@id([messageId, channelId])
}

model PlaygroundRequest {
  id                String           @id @default(cuid())
  phone             String?
  name              String
  providedEmail     String
  organization      String?
  website           String
  calendlyUrl       String
  title             String           @db.VarChar(200)
  requiredSkills    String[]         @default([])
  isFree            Boolean
  budget            Decimal?         @db.Money
  description       String           @db.Text
  dueDate           DateTime         @db.Date
  estimatedTimeDays Int
  requester         User             @relation(fields: [requesterId], references: [id])
  requesterId       String
  status            Status           @default(Pending)
  discordMessages   DiscordMessage[]

  applications PlaygroundApplication[]
  category     PlaygroundRequestCategory

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
